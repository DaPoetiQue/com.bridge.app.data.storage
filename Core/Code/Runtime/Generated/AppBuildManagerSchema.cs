// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bridge.Core.App.Manager
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum BuildTargetType : sbyte
{
  NoTarget = -2,
  StandaloneOSX = 2,
  StandaloneWindows = 5,
  iOS = 9,
  Android = 13,
  StandaloneWindows64 = 19,
  WebGL = 20,
  WSAPlayer = 21,
  StandaloneLinux64 = 24,
  PS4 = 31,
  XBoxOne = 33,
  TVOS = 37,
  Switch = 38,
  Lumin = 39,
  Stadia = 40,
  CloudRendering = 41,
  GameCoreXBoxSeries = 42,
  GameCoreXBoxOne = 43,
  PS5 = 44,
  EmbeddedLinux = 45,
};

public enum UIOrientationType : sbyte
{
  Portrait = 1,
  PortraitUpsideDown = 2,
  LandscapeLeft = 3,
  LandscapeRight = 4,
  AutoRotate = 5,
};

public enum AndroidSdkVersionsType : sbyte
{
  AndroidApiLevelAuto = 0,
  AndroidApiLevel16 = 16,
  AndroidApiLevel17 = 17,
  AndroidApiLevel18 = 18,
  AndroidApiLevel19 = 19,
  AndroidApiLevel21 = 21,
  AndroidApiLevel22 = 22,
  AndroidApiLevel23 = 23,
  AndroidApiLevel24 = 24,
  AndroidApiLevel25 = 25,
  AndroidApiLevel26 = 26,
  AndroidApiLevel27 = 27,
  AndroidApiLevel28 = 28,
  AndroidApiLevel29 = 29,
  AndroidApiLevel30 = 30,
};

public enum AndroidPreferredInstallLocationType : sbyte
{
  Auto = 0,
  PreferExternal = 1,
  ForceInternal = 2,
};

public struct DisplayResolution : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public DisplayResolution __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Width { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Height { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Bridge.Core.App.Manager.DisplayResolution> CreateDisplayResolution(FlatBufferBuilder builder, int Width, int Height) {
    builder.Prep(4, 8);
    builder.PutInt(Height);
    builder.PutInt(Width);
    return new Offset<Bridge.Core.App.Manager.DisplayResolution>(builder.Offset);
  }
};

public struct UnitySprite : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static UnitySprite GetRootAsUnitySprite(ByteBuffer _bb) { return GetRootAsUnitySprite(_bb, new UnitySprite()); }
  public static UnitySprite GetRootAsUnitySprite(ByteBuffer _bb, UnitySprite obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnitySprite __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }
  public sbyte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetDataBytes() { return __p.__vector_as_span<sbyte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetDataArray() { return __p.__vector_as_array<sbyte>(6); }

  public static Offset<Bridge.Core.App.Manager.UnitySprite> CreateUnitySprite(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    UnitySprite.AddData(builder, dataOffset);
    UnitySprite.AddUrl(builder, urlOffset);
    return UnitySprite.EndUnitySprite(builder);
  }

  public static void StartUnitySprite(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Bridge.Core.App.Manager.UnitySprite> EndUnitySprite(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.UnitySprite>(o);
  }
};

public struct UnityTexture : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static UnityTexture GetRootAsUnityTexture(ByteBuffer _bb) { return GetRootAsUnityTexture(_bb, new UnityTexture()); }
  public static UnityTexture GetRootAsUnityTexture(ByteBuffer _bb, UnityTexture obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnityTexture __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }
  public sbyte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetDataBytes() { return __p.__vector_as_span<sbyte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetDataArray() { return __p.__vector_as_array<sbyte>(6); }

  public static Offset<Bridge.Core.App.Manager.UnityTexture> CreateUnityTexture(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    UnityTexture.AddData(builder, dataOffset);
    UnityTexture.AddUrl(builder, urlOffset);
    return UnityTexture.EndUnityTexture(builder);
  }

  public static void StartUnityTexture(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Bridge.Core.App.Manager.UnityTexture> EndUnityTexture(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.UnityTexture>(o);
  }
};

public struct AppInfoData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AppInfoData GetRootAsAppInfoData(ByteBuffer _bb) { return GetRootAsAppInfoData(_bb, new AppInfoData()); }
  public static AppInfoData GetRootAsAppInfoData(ByteBuffer _bb, AppInfoData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AppInfoData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CompanyName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompanyNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCompanyNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCompanyNameArray() { return __p.__vector_as_array<byte>(4); }
  public string AppName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAppNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAppNameArray() { return __p.__vector_as_array<byte>(6); }
  public string AppVersion { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppVersionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAppVersionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAppVersionArray() { return __p.__vector_as_array<byte>(8); }
  public Bridge.Core.App.Manager.UnityTexture? AppIcon { get { int o = __p.__offset(10); return o != 0 ? (Bridge.Core.App.Manager.UnityTexture?)(new Bridge.Core.App.Manager.UnityTexture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.UnitySprite? SplashScreen { get { int o = __p.__offset(12); return o != 0 ? (Bridge.Core.App.Manager.UnitySprite?)(new Bridge.Core.App.Manager.UnitySprite()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string AppIdentifier { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppIdentifierBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAppIdentifierBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAppIdentifierArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Bridge.Core.App.Manager.AppInfoData> CreateAppInfoData(FlatBufferBuilder builder,
      StringOffset company_nameOffset = default(StringOffset),
      StringOffset app_nameOffset = default(StringOffset),
      StringOffset app_versionOffset = default(StringOffset),
      Offset<Bridge.Core.App.Manager.UnityTexture> app_iconOffset = default(Offset<Bridge.Core.App.Manager.UnityTexture>),
      Offset<Bridge.Core.App.Manager.UnitySprite> splash_screenOffset = default(Offset<Bridge.Core.App.Manager.UnitySprite>),
      StringOffset app_identifierOffset = default(StringOffset)) {
    builder.StartTable(6);
    AppInfoData.AddAppIdentifier(builder, app_identifierOffset);
    AppInfoData.AddSplashScreen(builder, splash_screenOffset);
    AppInfoData.AddAppIcon(builder, app_iconOffset);
    AppInfoData.AddAppVersion(builder, app_versionOffset);
    AppInfoData.AddAppName(builder, app_nameOffset);
    AppInfoData.AddCompanyName(builder, company_nameOffset);
    return AppInfoData.EndAppInfoData(builder);
  }

  public static void StartAppInfoData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddCompanyName(FlatBufferBuilder builder, StringOffset companyNameOffset) { builder.AddOffset(0, companyNameOffset.Value, 0); }
  public static void AddAppName(FlatBufferBuilder builder, StringOffset appNameOffset) { builder.AddOffset(1, appNameOffset.Value, 0); }
  public static void AddAppVersion(FlatBufferBuilder builder, StringOffset appVersionOffset) { builder.AddOffset(2, appVersionOffset.Value, 0); }
  public static void AddAppIcon(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.UnityTexture> appIconOffset) { builder.AddOffset(3, appIconOffset.Value, 0); }
  public static void AddSplashScreen(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.UnitySprite> splashScreenOffset) { builder.AddOffset(4, splashScreenOffset.Value, 0); }
  public static void AddAppIdentifier(FlatBufferBuilder builder, StringOffset appIdentifierOffset) { builder.AddOffset(5, appIdentifierOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Manager.AppInfoData> EndAppInfoData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.AppInfoData>(o);
  }
};

public struct BuildConfigData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BuildConfigData GetRootAsBuildConfigData(ByteBuffer _bb) { return GetRootAsBuildConfigData(_bb, new BuildConfigData()); }
  public static BuildConfigData GetRootAsBuildConfigData(ByteBuffer _bb, BuildConfigData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuildConfigData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Scene { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSceneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSceneArray() { return __p.__vector_as_array<byte>(4); }
  public Bridge.Core.App.Manager.BuildTargetType Platform { get { int o = __p.__offset(6); return o != 0 ? (Bridge.Core.App.Manager.BuildTargetType)__p.bb.GetSbyte(o + __p.bb_pos) : Bridge.Core.App.Manager.BuildTargetType.NoTarget; } }
  public bool AllowDebugging { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool DevelopmentBuild { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string BuildLocation { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildLocationBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBuildLocationBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBuildLocationArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Bridge.Core.App.Manager.BuildConfigData> CreateBuildConfigData(FlatBufferBuilder builder,
      StringOffset sceneOffset = default(StringOffset),
      Bridge.Core.App.Manager.BuildTargetType platform = Bridge.Core.App.Manager.BuildTargetType.NoTarget,
      bool allow_debugging = false,
      bool development_build = false,
      StringOffset build_locationOffset = default(StringOffset)) {
    builder.StartTable(5);
    BuildConfigData.AddBuildLocation(builder, build_locationOffset);
    BuildConfigData.AddScene(builder, sceneOffset);
    BuildConfigData.AddDevelopmentBuild(builder, development_build);
    BuildConfigData.AddAllowDebugging(builder, allow_debugging);
    BuildConfigData.AddPlatform(builder, platform);
    return BuildConfigData.EndBuildConfigData(builder);
  }

  public static void StartBuildConfigData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddScene(FlatBufferBuilder builder, StringOffset sceneOffset) { builder.AddOffset(0, sceneOffset.Value, 0); }
  public static void AddPlatform(FlatBufferBuilder builder, Bridge.Core.App.Manager.BuildTargetType platform) { builder.AddSbyte(1, (sbyte)platform, -2); }
  public static void AddAllowDebugging(FlatBufferBuilder builder, bool allowDebugging) { builder.AddBool(2, allowDebugging, false); }
  public static void AddDevelopmentBuild(FlatBufferBuilder builder, bool developmentBuild) { builder.AddBool(3, developmentBuild, false); }
  public static void AddBuildLocation(FlatBufferBuilder builder, StringOffset buildLocationOffset) { builder.AddOffset(4, buildLocationOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Manager.BuildConfigData> EndBuildConfigData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.BuildConfigData>(o);
  }
};

public struct AndroidBuildSettingsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AndroidBuildSettingsData GetRootAsAndroidBuildSettingsData(ByteBuffer _bb) { return GetRootAsAndroidBuildSettingsData(_bb, new AndroidBuildSettingsData()); }
  public static AndroidBuildSettingsData GetRootAsAndroidBuildSettingsData(ByteBuffer _bb, AndroidBuildSettingsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AndroidBuildSettingsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bridge.Core.App.Manager.AndroidPreferredInstallLocationType InstallLocation { get { int o = __p.__offset(4); return o != 0 ? (Bridge.Core.App.Manager.AndroidPreferredInstallLocationType)__p.bb.GetSbyte(o + __p.bb_pos) : Bridge.Core.App.Manager.AndroidPreferredInstallLocationType.Auto; } }
  public Bridge.Core.App.Manager.AndroidSdkVersionsType SdkVersion { get { int o = __p.__offset(6); return o != 0 ? (Bridge.Core.App.Manager.AndroidSdkVersionsType)__p.bb.GetSbyte(o + __p.bb_pos) : Bridge.Core.App.Manager.AndroidSdkVersionsType.AndroidApiLevelAuto; } }
  public bool BuildAppBundle { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Bridge.Core.App.Manager.AndroidBuildSettingsData> CreateAndroidBuildSettingsData(FlatBufferBuilder builder,
      Bridge.Core.App.Manager.AndroidPreferredInstallLocationType install_location = Bridge.Core.App.Manager.AndroidPreferredInstallLocationType.Auto,
      Bridge.Core.App.Manager.AndroidSdkVersionsType sdk_version = Bridge.Core.App.Manager.AndroidSdkVersionsType.AndroidApiLevelAuto,
      bool build_app_bundle = false) {
    builder.StartTable(3);
    AndroidBuildSettingsData.AddBuildAppBundle(builder, build_app_bundle);
    AndroidBuildSettingsData.AddSdkVersion(builder, sdk_version);
    AndroidBuildSettingsData.AddInstallLocation(builder, install_location);
    return AndroidBuildSettingsData.EndAndroidBuildSettingsData(builder);
  }

  public static void StartAndroidBuildSettingsData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddInstallLocation(FlatBufferBuilder builder, Bridge.Core.App.Manager.AndroidPreferredInstallLocationType installLocation) { builder.AddSbyte(0, (sbyte)installLocation, 0); }
  public static void AddSdkVersion(FlatBufferBuilder builder, Bridge.Core.App.Manager.AndroidSdkVersionsType sdkVersion) { builder.AddSbyte(1, (sbyte)sdkVersion, 0); }
  public static void AddBuildAppBundle(FlatBufferBuilder builder, bool buildAppBundle) { builder.AddBool(2, buildAppBundle, false); }
  public static Offset<Bridge.Core.App.Manager.AndroidBuildSettingsData> EndAndroidBuildSettingsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.AndroidBuildSettingsData>(o);
  }
};

public struct ConsoleDisplaySettingsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ConsoleDisplaySettingsData GetRootAsConsoleDisplaySettingsData(ByteBuffer _bb) { return GetRootAsConsoleDisplaySettingsData(_bb, new ConsoleDisplaySettingsData()); }
  public static ConsoleDisplaySettingsData GetRootAsConsoleDisplaySettingsData(ByteBuffer _bb, ConsoleDisplaySettingsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConsoleDisplaySettingsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bridge.Core.App.Manager.DisplayResolution? Resolution { get { int o = __p.__offset(4); return o != 0 ? (Bridge.Core.App.Manager.DisplayResolution?)(new Bridge.Core.App.Manager.DisplayResolution()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartConsoleDisplaySettingsData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddResolution(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.DisplayResolution> resolutionOffset) { builder.AddStruct(0, resolutionOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Manager.ConsoleDisplaySettingsData> EndConsoleDisplaySettingsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.ConsoleDisplaySettingsData>(o);
  }
};

public struct MobileDisplaySettingsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MobileDisplaySettingsData GetRootAsMobileDisplaySettingsData(ByteBuffer _bb) { return GetRootAsMobileDisplaySettingsData(_bb, new MobileDisplaySettingsData()); }
  public static MobileDisplaySettingsData GetRootAsMobileDisplaySettingsData(ByteBuffer _bb, MobileDisplaySettingsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MobileDisplaySettingsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bridge.Core.App.Manager.DisplayResolution? Resolution { get { int o = __p.__offset(4); return o != 0 ? (Bridge.Core.App.Manager.DisplayResolution?)(new Bridge.Core.App.Manager.DisplayResolution()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Bridge.Core.App.Manager.UIOrientationType AllowedOrientation { get { int o = __p.__offset(6); return o != 0 ? (Bridge.Core.App.Manager.UIOrientationType)__p.bb.GetSbyte(o + __p.bb_pos) : Bridge.Core.App.Manager.UIOrientationType.Portrait; } }

  public static void StartMobileDisplaySettingsData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddResolution(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.DisplayResolution> resolutionOffset) { builder.AddStruct(0, resolutionOffset.Value, 0); }
  public static void AddAllowedOrientation(FlatBufferBuilder builder, Bridge.Core.App.Manager.UIOrientationType allowedOrientation) { builder.AddSbyte(1, (sbyte)allowedOrientation, 1); }
  public static Offset<Bridge.Core.App.Manager.MobileDisplaySettingsData> EndMobileDisplaySettingsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.MobileDisplaySettingsData>(o);
  }
};

public struct StandaloneDisplaySettingsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static StandaloneDisplaySettingsData GetRootAsStandaloneDisplaySettingsData(ByteBuffer _bb) { return GetRootAsStandaloneDisplaySettingsData(_bb, new StandaloneDisplaySettingsData()); }
  public static StandaloneDisplaySettingsData GetRootAsStandaloneDisplaySettingsData(ByteBuffer _bb, StandaloneDisplaySettingsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StandaloneDisplaySettingsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Windowed { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Bridge.Core.App.Manager.DisplayResolution? Resolution { get { int o = __p.__offset(6); return o != 0 ? (Bridge.Core.App.Manager.DisplayResolution?)(new Bridge.Core.App.Manager.DisplayResolution()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartStandaloneDisplaySettingsData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddWindowed(FlatBufferBuilder builder, bool windowed) { builder.AddBool(0, windowed, false); }
  public static void AddResolution(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.DisplayResolution> resolutionOffset) { builder.AddStruct(1, resolutionOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Manager.StandaloneDisplaySettingsData> EndStandaloneDisplaySettingsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.StandaloneDisplaySettingsData>(o);
  }
};

public struct WebDisplaySettingsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WebDisplaySettingsData GetRootAsWebDisplaySettingsData(ByteBuffer _bb) { return GetRootAsWebDisplaySettingsData(_bb, new WebDisplaySettingsData()); }
  public static WebDisplaySettingsData GetRootAsWebDisplaySettingsData(ByteBuffer _bb, WebDisplaySettingsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WebDisplaySettingsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bridge.Core.App.Manager.DisplayResolution? Resolution { get { int o = __p.__offset(4); return o != 0 ? (Bridge.Core.App.Manager.DisplayResolution?)(new Bridge.Core.App.Manager.DisplayResolution()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartWebDisplaySettingsData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddResolution(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.DisplayResolution> resolutionOffset) { builder.AddStruct(0, resolutionOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Manager.WebDisplaySettingsData> EndWebDisplaySettingsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.WebDisplaySettingsData>(o);
  }
};

public struct AppBuildSettingsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AppBuildSettingsData GetRootAsAppBuildSettingsData(ByteBuffer _bb) { return GetRootAsAppBuildSettingsData(_bb, new AppBuildSettingsData()); }
  public static AppBuildSettingsData GetRootAsAppBuildSettingsData(ByteBuffer _bb, AppBuildSettingsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AppBuildSettingsDataBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ABMD"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AppBuildSettingsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bridge.Core.App.Manager.AppInfoData? AppInfo { get { int o = __p.__offset(4); return o != 0 ? (Bridge.Core.App.Manager.AppInfoData?)(new Bridge.Core.App.Manager.AppInfoData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.BuildConfigData? Configurations { get { int o = __p.__offset(6); return o != 0 ? (Bridge.Core.App.Manager.BuildConfigData?)(new Bridge.Core.App.Manager.BuildConfigData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.ConsoleDisplaySettingsData? ConsoleDisplaySettings { get { int o = __p.__offset(8); return o != 0 ? (Bridge.Core.App.Manager.ConsoleDisplaySettingsData?)(new Bridge.Core.App.Manager.ConsoleDisplaySettingsData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.MobileDisplaySettingsData? MobileDisplaySettings { get { int o = __p.__offset(10); return o != 0 ? (Bridge.Core.App.Manager.MobileDisplaySettingsData?)(new Bridge.Core.App.Manager.MobileDisplaySettingsData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.StandaloneDisplaySettingsData? StandaloneDisplaySettings { get { int o = __p.__offset(12); return o != 0 ? (Bridge.Core.App.Manager.StandaloneDisplaySettingsData?)(new Bridge.Core.App.Manager.StandaloneDisplaySettingsData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.WebDisplaySettingsData? WebDisplaySettings { get { int o = __p.__offset(14); return o != 0 ? (Bridge.Core.App.Manager.WebDisplaySettingsData?)(new Bridge.Core.App.Manager.WebDisplaySettingsData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bridge.Core.App.Manager.AndroidBuildSettingsData? AndroidSettings { get { int o = __p.__offset(16); return o != 0 ? (Bridge.Core.App.Manager.AndroidBuildSettingsData?)(new Bridge.Core.App.Manager.AndroidBuildSettingsData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Bridge.Core.App.Manager.AppBuildSettingsData> CreateAppBuildSettingsData(FlatBufferBuilder builder,
      Offset<Bridge.Core.App.Manager.AppInfoData> app_infoOffset = default(Offset<Bridge.Core.App.Manager.AppInfoData>),
      Offset<Bridge.Core.App.Manager.BuildConfigData> configurationsOffset = default(Offset<Bridge.Core.App.Manager.BuildConfigData>),
      Offset<Bridge.Core.App.Manager.ConsoleDisplaySettingsData> console_display_settingsOffset = default(Offset<Bridge.Core.App.Manager.ConsoleDisplaySettingsData>),
      Offset<Bridge.Core.App.Manager.MobileDisplaySettingsData> mobile_display_settingsOffset = default(Offset<Bridge.Core.App.Manager.MobileDisplaySettingsData>),
      Offset<Bridge.Core.App.Manager.StandaloneDisplaySettingsData> standalone_display_settingsOffset = default(Offset<Bridge.Core.App.Manager.StandaloneDisplaySettingsData>),
      Offset<Bridge.Core.App.Manager.WebDisplaySettingsData> web_display_settingsOffset = default(Offset<Bridge.Core.App.Manager.WebDisplaySettingsData>),
      Offset<Bridge.Core.App.Manager.AndroidBuildSettingsData> android_settingsOffset = default(Offset<Bridge.Core.App.Manager.AndroidBuildSettingsData>)) {
    builder.StartTable(7);
    AppBuildSettingsData.AddAndroidSettings(builder, android_settingsOffset);
    AppBuildSettingsData.AddWebDisplaySettings(builder, web_display_settingsOffset);
    AppBuildSettingsData.AddStandaloneDisplaySettings(builder, standalone_display_settingsOffset);
    AppBuildSettingsData.AddMobileDisplaySettings(builder, mobile_display_settingsOffset);
    AppBuildSettingsData.AddConsoleDisplaySettings(builder, console_display_settingsOffset);
    AppBuildSettingsData.AddConfigurations(builder, configurationsOffset);
    AppBuildSettingsData.AddAppInfo(builder, app_infoOffset);
    return AppBuildSettingsData.EndAppBuildSettingsData(builder);
  }

  public static void StartAppBuildSettingsData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddAppInfo(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.AppInfoData> appInfoOffset) { builder.AddOffset(0, appInfoOffset.Value, 0); }
  public static void AddConfigurations(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.BuildConfigData> configurationsOffset) { builder.AddOffset(1, configurationsOffset.Value, 0); }
  public static void AddConsoleDisplaySettings(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.ConsoleDisplaySettingsData> consoleDisplaySettingsOffset) { builder.AddOffset(2, consoleDisplaySettingsOffset.Value, 0); }
  public static void AddMobileDisplaySettings(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.MobileDisplaySettingsData> mobileDisplaySettingsOffset) { builder.AddOffset(3, mobileDisplaySettingsOffset.Value, 0); }
  public static void AddStandaloneDisplaySettings(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.StandaloneDisplaySettingsData> standaloneDisplaySettingsOffset) { builder.AddOffset(4, standaloneDisplaySettingsOffset.Value, 0); }
  public static void AddWebDisplaySettings(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.WebDisplaySettingsData> webDisplaySettingsOffset) { builder.AddOffset(5, webDisplaySettingsOffset.Value, 0); }
  public static void AddAndroidSettings(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.AndroidBuildSettingsData> androidSettingsOffset) { builder.AddOffset(6, androidSettingsOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Manager.AppBuildSettingsData> EndAppBuildSettingsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Manager.AppBuildSettingsData>(o);
  }
  public static void FinishAppBuildSettingsDataBuffer(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.AppBuildSettingsData> offset) { builder.Finish(offset.Value, "ABMD"); }
  public static void FinishSizePrefixedAppBuildSettingsDataBuffer(FlatBufferBuilder builder, Offset<Bridge.Core.App.Manager.AppBuildSettingsData> offset) { builder.FinishSizePrefixed(offset.Value, "ABMD"); }
};


}
