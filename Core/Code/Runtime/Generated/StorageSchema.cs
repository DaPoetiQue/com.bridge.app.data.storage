// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bridge.Core.App.Data.Storage
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum FileExtension : sbyte
{
  asset = 1,
  bat = 2,
  br = 3,
  css = 4,
  dat = 5,
  dll = 6,
  fbs = 7,
  json = 8,
  html = 9,
  txt = 10,
  xml = 11,
};

public struct StorageFile : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static StorageFile GetRootAsStorageFile(ByteBuffer _bb) { return GetRootAsStorageFile(_bb, new StorageFile()); }
  public static StorageFile GetRootAsStorageFile(ByteBuffer _bb, StorageFile obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StorageFile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FileName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(4); }
  public string StorageDirectory { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStorageDirectoryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStorageDirectoryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStorageDirectoryArray() { return __p.__vector_as_array<byte>(6); }
  public Bridge.Core.App.Data.Storage.FileExtension FileExtension { get { int o = __p.__offset(8); return o != 0 ? (Bridge.Core.App.Data.Storage.FileExtension)__p.bb.GetSbyte(o + __p.bb_pos) : Bridge.Core.App.Data.Storage.FileExtension.br; } }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Bridge.Core.App.Data.Storage.StorageFile> CreateStorageFile(FlatBufferBuilder builder,
      StringOffset file_nameOffset = default(StringOffset),
      StringOffset storage_directoryOffset = default(StringOffset),
      Bridge.Core.App.Data.Storage.FileExtension file_extension = Bridge.Core.App.Data.Storage.FileExtension.br,
      StringOffset descriptionOffset = default(StringOffset)) {
    builder.StartTable(4);
    StorageFile.AddDescription(builder, descriptionOffset);
    StorageFile.AddStorageDirectory(builder, storage_directoryOffset);
    StorageFile.AddFileName(builder, file_nameOffset);
    StorageFile.AddFileExtension(builder, file_extension);
    return StorageFile.EndStorageFile(builder);
  }

  public static void StartStorageFile(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(0, fileNameOffset.Value, 0); }
  public static void AddStorageDirectory(FlatBufferBuilder builder, StringOffset storageDirectoryOffset) { builder.AddOffset(1, storageDirectoryOffset.Value, 0); }
  public static void AddFileExtension(FlatBufferBuilder builder, Bridge.Core.App.Data.Storage.FileExtension fileExtension) { builder.AddSbyte(2, (sbyte)fileExtension, 3); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Data.Storage.StorageFile> EndStorageFile(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Data.Storage.StorageFile>(o);
  }
};

public struct StorageCache : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static StorageCache GetRootAsStorageCache(ByteBuffer _bb) { return GetRootAsStorageCache(_bb, new StorageCache()); }
  public static StorageCache GetRootAsStorageCache(ByteBuffer _bb, StorageCache obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool StorageCacheBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StorageCache __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bridge.Core.App.Data.Storage.StorageFile? CacheFiles(int j) { int o = __p.__offset(4); return o != 0 ? (Bridge.Core.App.Data.Storage.StorageFile?)(new Bridge.Core.App.Data.Storage.StorageFile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CacheFilesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string CacheDirectory { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCacheDirectoryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCacheDirectoryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCacheDirectoryArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Bridge.Core.App.Data.Storage.StorageCache> CreateStorageCache(FlatBufferBuilder builder,
      VectorOffset cache_filesOffset = default(VectorOffset),
      StringOffset cache_directoryOffset = default(StringOffset)) {
    builder.StartTable(2);
    StorageCache.AddCacheDirectory(builder, cache_directoryOffset);
    StorageCache.AddCacheFiles(builder, cache_filesOffset);
    return StorageCache.EndStorageCache(builder);
  }

  public static void StartStorageCache(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCacheFiles(FlatBufferBuilder builder, VectorOffset cacheFilesOffset) { builder.AddOffset(0, cacheFilesOffset.Value, 0); }
  public static VectorOffset CreateCacheFilesVector(FlatBufferBuilder builder, Offset<Bridge.Core.App.Data.Storage.StorageFile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCacheFilesVectorBlock(FlatBufferBuilder builder, Offset<Bridge.Core.App.Data.Storage.StorageFile>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCacheFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCacheDirectory(FlatBufferBuilder builder, StringOffset cacheDirectoryOffset) { builder.AddOffset(1, cacheDirectoryOffset.Value, 0); }
  public static Offset<Bridge.Core.App.Data.Storage.StorageCache> EndStorageCache(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Bridge.Core.App.Data.Storage.StorageCache>(o);
  }
  public static void FinishStorageCacheBuffer(FlatBufferBuilder builder, Offset<Bridge.Core.App.Data.Storage.StorageCache> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedStorageCacheBuffer(FlatBufferBuilder builder, Offset<Bridge.Core.App.Data.Storage.StorageCache> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
};


}
